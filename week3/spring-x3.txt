ORM
	- Object Relational Mapping
		- converts between incompatible types of Object (in Java) and database tables

JPA
	- Java Persistence API
		- list of interfaces meant for the mapping/managing of relational data with Java Object
		- "concept" rather than a tool
			- describes which objects should be persisted and how
			- tools like Hibernate IMPLEMENT JPA
				- JPA != Hibernate

Hibernate
	- ORM framework for Java
	- Benefits
		- Abstraction of JDBC
			- uses JDBC under the hood
			- abstracts away SQL queries
				- abstracts away the SQL dialects used (ie: Postgres, Oracle, MySQL...)
			- Reduces Boiler plate code

Spring Data JPA
	- Spring Data is a Spring Project used to address data persistence
		- Spring Data JPA
			- "a module" within Spring Data project
			- provides standard implementation to common DAO methods
			- built upon Spring ORM, which is built upon Hibernate, which is built upon JDBC
		- Spring Data Hierarchy
			- Repository (I)
			- CrudRepository (I)
			- PagingAndSortingRepository (I)
			- JpaRepository (I)
		- Custom methods
			- declaring a method signature in the interface to be implemented
			- https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.query-methods.details
		- @Query
			- allows the user to provide custom behavior that may not be provided by spring
	- Set up
		- map our models with JPA annotations
			- @Entity
			- @Table
			- ...
		- create an interface mapped with @Repository
			- extend JpaRepository<Resource, idType>
		- providing credentials in the application.yml

Multiplicity resources:
	- https://www.baeldung.com/jpa-many-to-many
	- https://www.baeldung.com/hibernate-one-to-many

Spring Profiles
	- allow us to use different version of beans in different environment
		- allows to have different configurations for different environments (dev vs prod)
			- dev
				- for development/testing
				- we could also have an in memory database as a datasource
			- prod
				- for end users
				- has its own database
	- setup
		- in application.yml
		- in pom.xml
	- Changing from dev to prod while packaging using maven
		- mvn package -Dmaven.test.skip -Pprod

Set up h2 db
	- import h2 dependency
	- configure h2 in the application.yml
	- add some data to be preloaded using a data.sql file in the resource folder
		- contains sql statements to be ran when the file is loaded
	- access h2-console
		- like dbeaver for h2 database
		- localhost:[port]/h2-console
			- URL defined in your config file
			- username defined in your config file
			- password defined in your config file
spring:
  datasource:
    url: jdbc:h2:mem:dbtest
    username: sa
    password: pass
  jpa:
    show-sql: true
    database-platform: org.hibernate.dialect.H2Dialect
    defer-datasource-initialization: true
    hibernate:
      ddl-auto: create

DTO
	- Data Transfer Objects
		- returning objects without sensitive data to be transferred between webservices/to the front end

GlobalExceptionHandler
	- allows for the handling of all exception occuring server side with relevant http status code in a single class
		- @ControllerAdvice

	@ResponseStatus(value=HttpStatus.NOT_FOUND, reason="No user of that id was found.")
	@ExceptionHandler(UserNotFoundException.class)
	public void handleUserNotFoundException() {
		// log or something
	}
















