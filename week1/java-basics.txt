Java
	- Object based Programming Language (OOP)
		- multi paradigm language
			- also supports different programming paradigms such as functional programming
	- Backed/maintained by Oracle, mature language
		- updates/maintained
		- a lot of documentations, tutorials, resources overall
			- StackOverflow (chances are someone ran into your issue before)
	- Portable/Platform independent
		- WORA - write once run anywhere
		- due to the JVM
	- Compiled language
		- compile time error checking
		- compiles java source code into an intermediary language (bytecode) to be run by the JVM
	- Support multithreading
		- run processes concurrently
	- Automatic garbage collection
		- no need to manually allocate/deallocate memory
			- garbage collector
	- Strictly typed

JDK/JRE/JVM
	- JDK
		- Java Development Kit
			- Provides an environment to develop and execute a Java Program
			- Contains the compiler, tools for development
			- Contains the JRE and JVM
	- JRE
		- Java Runtime Environment
			- All that's needed to RUN an application
			- Contains the JVM
			- Contains the core libraries for Java
	- JVM
		- Java Virtual Machine
			- Takes the COMPILED code (bytecode) and executes it from the main method
			- Different OS can have different implementation of the JVM

Compilation process
	highlevel code (Java Source code) => javac [.java filename] => Bytecode (intermediary language) (.class file)
Running Java
	Bytecode (intermediary language) (.class file) => java [.class filename])
Can pass in arguments:
	java [.class file name] [args0] [args1] ...

Variables
	- used to store data
	- 2 types of variables: primitives and reference types
	- primitives - are stored in the stack
		- whole numbers: byte, short, int, long
		- floating points: float, double
		- characters: char
		- boolean
	- reference types - reference objects stored in the heap
		- Objects
		- Wrapper classes
			- way to treat primitives like objects
				- has methods available to interacte with the value
			- AutoBoxing
				- automatic conversion of a primitive to its wrapper class
			- AutoUnboxing
				- automatic conversion of a wrapper class into its primitive

Class
	- Blueprints for object, they define states and behaviors
		- states refer to the fields
		- behaviors refer to methods
	- objects can be instantiated using the new keyword which calls the constructor
	- Constructors
		- type of method that has no return types and that are used to create an instance of a class (object)
		- called using the new keyword
			- responsible for allocating memory for the new object through a constructor
			- typically allows you to initialize variables for the created object
		- no-args constructor: constructor with no parameters
			- public Driver () {}
		- parameterized/overloaded constructors: constructors with parameters
			- public Driver (String s, ...) {}
		- default constructor
			- no-args constructor provided by the compiler IF NO OTHER CONSTRUCTOR IS PRESENT
		- constructor chaining
			- calling a different constructor of the same class using 
				- this(), this(args...)
Methods
	- reusable block of codes that can take in arguments and return something
		- void: no return type
		- return [someReturn];
	- main method
		- entrypoint to the JVM
		- public static void main(String[] args) => method signature
		- calling other methods

Scopes of a variable
	- DO NOT CONFUSE THIS WITH ACCESS MODIFIERS
	- lifetime of a variable
	- static/class scope
		- variables live throughout the lifetime of the application
	- instance/object scope
		- variable live throughout the lifetime of that object
		- begins once an object is instantiated and ends when the object is garbage collected
	- method scope
		- variable lives within the scope of a method
		- includes parameters and variables declared within that method
	- loop/block scope
		- variable lives only during the execution of a block
			- within a loop or a conditional statement

Java Memory Management
	- Stack
		- Datastructure that follows a LIFO pattern (Last In First Out)
		- holds primitives and reference variables
		- once the scope of the method is over, the variable "pop" off
			- naturally managed
	- Heap
		- Object storage
		- almost anything that is not a primitive/ ref type is an object
		- String Pool
			- for String literals
				- String s = "someValue";
		- Managed by the Garbage collector
	- Java is a pass by value language, means that passing a variable into a method uses the value of the variable rather than the variable itself

Garbage Collection
	- free up memory/resources once they're no longer referenced
	- Garbage collector is a daemon thread
		- thread running in the background
		- removes objects without references in the heap
	- finalize() - last method that called upon by an object before it's garbage collected
		- people don't really use this anymore
	- Garbage collection cannot be forced, it can only be suggested using System.gc(); 

Packages
	- folder/directory
		- structure
	- resolve naming conflicts
	- define access to classes/members
		- access modifiers
	- group items based on what they do/logical structure
	- naming convention
		- reverse url format/reverse domain name
		- com.revature (all lower case)
	- packages are organized based on the problem that they solve
		- separation of concerns
			- a package that holds models/entities
			- a package that holds all classes related to data access/storage/interacting with a database
			- a package that holds all classes related to business logic (services)
			- a package that holds all classes related to interacting with the web (web, controllers)

OOP
	- Programming paradigm which relies on classes and objects to model real world objects
		- 4 Pillars of OOP
			- Encapsulation
			- Inheritance
			- Polymorphism
			- Abstraction

Class
	- Blueprint/Template for an object, defines their states and behaviors
	- Members of a class
		- variables and methods of that class
			- Object/Instance specific
				- instance variable
				- instance method
			- Class/Static, members that don't belong to a specific object
				- static variables
				- static methods

Object
	- Instance of a class
		- can be created using the "new" keyword
			- calls the constructor of a class
	- Beware the Object class

Encapsulation
	- refers to the ability for an object to protect its states and behavior
	- can achieve by defining the accessibility of class members using access modifiers
		- set variables to private
	- setters/getters methods to interact with the property

Access modifiers
	- specify which classes have access to an entity (class, member of a class...)
		- public - least restrictive, all of the classes within the application have access
		- protected - all of the classes within the same package and all of the subclasses/children have access
		- "default" - all of the classes within the same package have access, default keyword is something else, therefore default is just the absence of an access modifier
		- private - only the class itself has access

Inheritance
	- when subclasses/children classes adopt states/behaviors from a super/parent class
	- deriving classes allows for code reusability
		- DRY principle
	- keyword: extends
	- by default every class extends the object class
	- as a result all of the classes inherit methods from the object class
		- toString(), equals(), hashcode()
			- they're not always too useful by themselves...
	- by default the first line of every constructor is a call to the parent's constructor: super()
	- Java does not support multiple inheritance